<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
	<Product Id="*" Name="FrameworkTest" Language="1033" Codepage="1252" Version="1.0.0.0" Manufacturer="RalfSasse" UpgradeCode="5bbbf591-d840-4845-8463-7e3b07c1fc02">
		<Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

		<MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
    
<!-- Das Media-Element verhindert die Warnung "ICE71: The Media table has no entries."
     und ersetzt das MediaTemplate-Element.
-->
    <Media Id="1" />

<!-- UIRef-Element
     Verweis auf das User-Interface (UI-Element) in der Datei "FrameworkAnzeige.wxs",
     in dem das Dialogfenster des Installationsprogramms definiert ist. Dieser Verweis
     führt dazu, dass alle Dialogfenster in das Hauptprogramm eingebunden werden.
-->
    <UIRef Id="MeinFrameworkTestProgramm" />

    <Feature Id="ProductFeature" Title="FrameworkTest" Level="1">
			<ComponentGroupRef Id="ProductComponents" />
		</Feature>

<!-- An dieser Stelle werden Properties (Variablen) definiert, auf die später
     eine CustomAction (eine C#-Funktion innerhalb einer DLL) zugreifen kann:
     DOTNETFRAMEWORK48:           "1" wenn mindestens Version 4.8 gefunden wird, sonst "0"
     DOTNETFRAMEWORKVORHANDEN:    exakte Versionsnummer der vorhandenen Version
     DOTNETFRAMEWORKERFORDERLICH: exakte Versionsnummer der erforderlichen Version
     DOTNETCORE3115:              "1" wenn mindestens Version 3.1.15 gefunden wird, sonst "0"
     DOTNETCOREVORHANDEN:         exakte Versionsnummer der vorhandenen Version
     DOTNETCOREERFORDERLICH:      exakte Versionsnummer der erforderlichen Version
-->
    <Property Id="DOTNETFRAMEWORK48"
              Value="0"/>
    <Property Id="DOTNETFRAMEWORKVORHANDEN"
              Value="DOTNETFRAMEWORKVORHANDEN"/>
    <Property Id="DOTNETFRAMEWORKERFORDERLICH"
              Value=".NET Framework 4.8"/>
    <Property Id="DOTNETCORE3115"
              Value="0"/>
    <Property Id="DOTNETCOREVORHANDEN"
              Value="DOTNETCOREVORHANDEN"/>
    <Property Id="DOTNETCOREERFORDERLICH"
              Value=".NET Core 3.1.15"/>

    <!-- Binary-Element für die Bitmap-Datei mit dem weißen Hintergrund der "Fake-Tabelle".
-->
    <Binary Id="Hintergrund" SourceFile="weiss.bmp" />
    
<!-- Mit dem Binary-Element wird die Verbindung zur DLL mit den CustomActions
     hergestellt. Diese DLL wird in einem separaten Visual-Studio-Projekt
     vom Typ "C# Custom Action Project for WiX v3" erstellt. Beim Kompilieren
     entstehen mehrere Dateien, von denen hier aber nur die Datei mit der Endung
     ".CA.dll" interessant ist.
-->
    <Binary Id="FrameworkTestCustomAction"
            SourceFile="FrameworkTestCustomAction2.CA.dll"/>
    
<!-- Da eine DLL mehrere Funktionen enthalten kann, muss dem MSI-Programm mitgeteilt
     werden, welche davon es ausführen soll. Hier ist es die Funktion FrameworkTest().
     Im Attribut "Execute" wird angegeben, zu welchem Zeitpunkt der Installation die
     CustomAction ausgeführt werden soll. Wenn man hier "immediate" angibt, muss der
     eigentliche Aufruf der CustomAction während der InstallUISequence erfolgen.
     Eine andere Möglichkeit wäre "deferred": während der InstallExecuteSequence.
     Im Attribut "Return" wird angegeben, was mit dem Rückgabewert der CustomAction
     geschehen soll. In diesem Beispiel wird er ignoriert, denn diese CustomAction
     schreibt ihre Ergebnisse direkt in die Properties "DOTNETFRAMEWORK48", 
     "DOTNETFRAMEWORKVORHANDEN", "DOTNETCORE3115" und "DOTNETCOREVORHANDEN".
-->    
    <CustomAction Id="FrameworkTest"
                  BinaryKey="FrameworkTestCustomAction"
                  DllEntry="FrameworkTest"
                  Execute="immediate" 
                  Return="ignore"/>

<!-- An dieser Stelle wird die CustomAction tatsächlich aufgerufen. Dies kann unter
     Anderem in InstallUISequence- oder InstallExecuteSequence-Elementen geschehen.
     Das hat Auswirkungen auf den Zeitpunkt, an dem die CustomAction während der
     Installation ausgeführt wird. Noch genauer kann man dies mir dem Before- oder
     After-Attribut festlegen. Es gibt eine festgelegte Reihenfolge von Ereignissen
     während einer Installation. "CostInitialize" steht ziemlich am Anfang und
     bedeutet die Berechnung, wieviel Festplattenspeicher für die Installation
     benötigt wird.
-->    
    <InstallUISequence>
      <Custom Action="FrameworkTest"
              After="CostInitialize"/>
    </InstallUISequence>
    
	</Product>

<!-- In diesen beiden Fragments wird festgelegt, in welches Verzeichnis auf dem
     Zielrechner das Programm installiert werden soll. In diesem Test-Skript
     wird allerdings nichts installiert.
-->
	<Fragment>
		<Directory Id="TARGETDIR" Name="SourceDir">
			<Directory Id="ProgramFilesFolder">
				<Directory Id="INSTALLFOLDER" Name="FrameworkTest" />
			</Directory>
		</Directory>
	</Fragment>

	<Fragment>
		<ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
		</ComponentGroup>
	</Fragment>

</Wix>
